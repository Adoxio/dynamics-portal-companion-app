@model PortalBuddyWebApp.Extensions.AzureAdB2COptions

@{
    Layout = null;
}

<script>
    var PortalBuddy = {        Uri: document.getElementById("portal-buddyUri").value,        UserId: document.getElementById("portal-userId").value,        WebsiteId: document.getElementById("portal-websiteId").value,        NewGuid: function () {            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);                return v.toString(16);            });        }	};

    PortalBuddy.Loader = {
        LoadScripts: function (scripts, callback) {
            var script = scripts.shift();
            var el = document.createElement('script');
            $('body').append(el);
            el.onload = function (scriptEvent) {
                console.log(scriptEvent.target.src + ' loaded');
                if (scripts.length) {
                    PortalBuddy.Loader.LoadScripts(scripts, callback);
                }
                else {
                    if (callback !== undefined) {
                        console.log('initializing callback...');
                        callback();
                    }
                }
            };
            el.src = script;
        },

        LoadStyleSheets: function (styles, callback) {
            var style = styles.shift();
            var el = document.createElement('link');
            $('head').append(el);
            el.onload = function (styleEvent) {
                console.log(styleEvent.target.href + ' loaded');
                if (styles.length) {
                    PortalBuddy.Loader.LoadStyleSheets(styles, callback);
                }
                else {
                    if (callback !== undefined) {
                        console.log('initializing callback...');
                        callback();
                    }
                }
            };
            el.href = style;
            el.rel = "stylesheet";
        }
    }

    PortalBuddy.Auth = {
        Params: {
            ClientId: '@Model.ClientId',
            Authority: '@Model.Authority',
            ApiUrl: '@Model.ApiUrl',
            Tenant: '@Model.Tenant',
            Policy: '@Model.DefaultPolicy',
            RedirectUri: '@Model.RedirectUri',
            ApiScopes: @Html.Raw(@Model.ApiScopes),
        },
        Client: '',
        Init: function () {
            console.log("Portal Buddy App Initializing");
            PortalBuddy.Auth.Client = new CC.CORE.PBAL.AppTokenFactory(
                PortalBuddy.Auth.Params.ClientId,
                PortalBuddy.Auth.Params.Tenant,
                PortalBuddy.Auth.Params.ApiScopes,
                PortalBuddy.Auth.Params.Policy,
                PortalBuddy.UserId,
                "https://portalbuddy.microsoftcrmportals.com/" + "blank.gif",
                PortalBuddy.Uri);
            console.log("Portal Buddy App Initialized");
        },
        GetHeaders: function (token, additionalHeaders) {
            var ajaxHeaders = {};

            // check token for error
            if (token !== null) {
                ajaxHeaders = {
                    'Authorization': 'Bearer ' + token
                };
            } else {
                console.log("token object null or missing, not including authoriztion header");
            }

            // add additional headers if they exist
            if (typeof additionalHeaders === "object") {
                jQuery.extend(ajaxHeaders, additionalHeaders);
            }

            return ajaxHeaders;
        }

    }

    PortalBuddy.App = {
        BaseScripts: [
            PortalBuddy.Uri + '/js/pbal/pbal.js'
        ],
        ExecuteRequest: function (type, data, dataType, processData, queryPath, additionalHeaders, async, requestKind) {
            PortalBuddy.Auth.Client.GetToken().always(function (accessToken) {
                if (requestKind == 'xml') {
                    PortalBuddy.App.ExecuteXmlRequest(type, data, responseType, async, queryPath, additionalHeaders, accessToken);
                } else {
                    PortalBuddy.App.ExecuteAjaxRequest(type, data, dataType, processData, queryPath, additionalHeaders, accessToken);
                }
            });
        },
        ExecuteAjaxRequest: function (type, data, dataType, processData, queryPath, additionalHeaders, token) {
            var deferred = jQuery.Deferred();
            var ajaxHeaders = PortalBuddy.Auth.Client.GetHeaders(token, additionalHeaders);

            jQuery.ajax({
                method: type,
                url: PortalBuddy.Uri + queryPath,
                data: data,
                dataType: dataType,
                processData: processData,
                headers: ajaxHeaders,
                success: function (responseData) {
                    deferred.resolve(responseData);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    deferred.reject({
                        xhr: jqXHR,
                        text: textStatus,
                        error: errorThrown
                    });
                }
            });

            return deferred.promise();
        },
        ExecuteXmlRequest: function (type, data, responseType, async, queryPath, additionalHeaders, token) {
            var deferred = jQuery.Deferred();
            var ajaxHeaders = PortalBuddy.Auth.Client.GetHeaders(token, additionalHeaders);

            var xhr = new XMLHttpRequest();
            xhr.open(type, PortalBuddy.Uri + queryPath, async);
            xhr.responseType = responseType;

            for (var key in ajaxHeaders) {
                xhr.setRequestHeader(key, ajaxHeaders[key]);
            }

            xhr.onreadystatechange = function (oEvent) {
                if (xhr.readyState === 4) {
                    deferred.resolve(this);
                }
            };

            xhr.send();
            return deferred.promise();``
        }
    }

    PortalBuddy.Loader.LoadScripts(PortalBuddy.App.BaseScripts, PortalBuddy.Auth.Init);
</script>